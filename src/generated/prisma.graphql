# source: https://ibl02-auction.herokuapp.com/auction/dev
# timestamp: Mon Sep 17 2018 22:49:55 GMT-0700 (Pacific Daylight Time)

type AggregatePlayer {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateWatchlist {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createPlayer(data: PlayerCreateInput!): Player!
  createWatchlist(data: WatchlistCreateInput!): Watchlist!
  createUser(data: UserCreateInput!): User!
  updatePlayer(data: PlayerUpdateInput!, where: PlayerWhereUniqueInput!): Player
  updateWatchlist(data: WatchlistUpdateInput!, where: WatchlistWhereUniqueInput!): Watchlist
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deletePlayer(where: PlayerWhereUniqueInput!): Player
  deleteWatchlist(where: WatchlistWhereUniqueInput!): Watchlist
  deleteUser(where: UserWhereUniqueInput!): User
  upsertPlayer(where: PlayerWhereUniqueInput!, create: PlayerCreateInput!, update: PlayerUpdateInput!): Player!
  upsertWatchlist(where: WatchlistWhereUniqueInput!, create: WatchlistCreateInput!, update: WatchlistUpdateInput!): Watchlist!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyPlayers(data: PlayerUpdateInput!, where: PlayerWhereInput): BatchPayload!
  updateManyWatchlists(data: WatchlistUpdateInput!, where: WatchlistWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  deleteManyPlayers(where: PlayerWhereInput): BatchPayload!
  deleteManyWatchlists(where: WatchlistWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Player implements Node {
  id: ID!
  createdAt: DateTime!
  name: String!
  team: String!
  position: String!
  closingtime: Int!
  price: [Float!]!
  bidder: [String!]!
  bidtimestamp: [DateTime!]!
  maxbid: [Float!]!
  maxbidder(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  watchlist(where: WatchlistWhereInput, orderBy: WatchlistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Watchlist!]
}

"""A connection to a list of items."""
type PlayerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PlayerEdge]!
  aggregate: AggregatePlayer!
}

input PlayerCreatebidderInput {
  set: [String!]
}

input PlayerCreatebidtimestampInput {
  set: [DateTime!]
}

input PlayerCreateInput {
  name: String!
  team: String!
  position: String!
  closingtime: Int!
  price: PlayerCreatepriceInput
  bidder: PlayerCreatebidderInput
  bidtimestamp: PlayerCreatebidtimestampInput
  maxbid: PlayerCreatemaxbidInput
  maxbidder: UserCreateManyInput
  watchlist: WatchlistCreateManyWithoutPlayerInput
}

input PlayerCreatemaxbidInput {
  set: [Float!]
}

input PlayerCreateOneWithoutWatchlistInput {
  create: PlayerCreateWithoutWatchlistInput
  connect: PlayerWhereUniqueInput
}

input PlayerCreatepriceInput {
  set: [Float!]
}

input PlayerCreateWithoutWatchlistInput {
  name: String!
  team: String!
  position: String!
  closingtime: Int!
  price: PlayerCreatepriceInput
  bidder: PlayerCreatebidderInput
  bidtimestamp: PlayerCreatebidtimestampInput
  maxbid: PlayerCreatemaxbidInput
  maxbidder: UserCreateManyInput
}

"""An edge in a connection."""
type PlayerEdge {
  """The item at the end of the edge."""
  node: Player!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PlayerOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
  team_ASC
  team_DESC
  position_ASC
  position_DESC
  closingtime_ASC
  closingtime_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PlayerPreviousValues {
  id: ID!
  createdAt: DateTime!
  name: String!
  team: String!
  position: String!
  closingtime: Int!
  price: [Float!]!
  bidder: [String!]!
  bidtimestamp: [DateTime!]!
  maxbid: [Float!]!
}

type PlayerSubscriptionPayload {
  mutation: MutationType!
  node: Player
  updatedFields: [String!]
  previousValues: PlayerPreviousValues
}

input PlayerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PlayerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PlayerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PlayerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PlayerWhereInput
}

input PlayerUpdatebidderInput {
  set: [String!]
}

input PlayerUpdatebidtimestampInput {
  set: [DateTime!]
}

input PlayerUpdateInput {
  name: String
  team: String
  position: String
  closingtime: Int
  price: PlayerUpdatepriceInput
  bidder: PlayerUpdatebidderInput
  bidtimestamp: PlayerUpdatebidtimestampInput
  maxbid: PlayerUpdatemaxbidInput
  maxbidder: UserUpdateManyInput
  watchlist: WatchlistUpdateManyWithoutPlayerInput
}

input PlayerUpdatemaxbidInput {
  set: [Float!]
}

input PlayerUpdateOneWithoutWatchlistInput {
  create: PlayerCreateWithoutWatchlistInput
  connect: PlayerWhereUniqueInput
  delete: Boolean
  update: PlayerUpdateWithoutWatchlistDataInput
  upsert: PlayerUpsertWithoutWatchlistInput
}

input PlayerUpdatepriceInput {
  set: [Float!]
}

input PlayerUpdateWithoutWatchlistDataInput {
  name: String
  team: String
  position: String
  closingtime: Int
  price: PlayerUpdatepriceInput
  bidder: PlayerUpdatebidderInput
  bidtimestamp: PlayerUpdatebidtimestampInput
  maxbid: PlayerUpdatemaxbidInput
  maxbidder: UserUpdateManyInput
}

input PlayerUpsertWithoutWatchlistInput {
  update: PlayerUpdateWithoutWatchlistDataInput!
  create: PlayerCreateWithoutWatchlistInput!
}

input PlayerWhereInput {
  """Logical AND on all given filters."""
  AND: [PlayerWhereInput!]

  """Logical OR on all given filters."""
  OR: [PlayerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PlayerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  team: String

  """All values that are not equal to given value."""
  team_not: String

  """All values that are contained in given list."""
  team_in: [String!]

  """All values that are not contained in given list."""
  team_not_in: [String!]

  """All values less than the given value."""
  team_lt: String

  """All values less than or equal the given value."""
  team_lte: String

  """All values greater than the given value."""
  team_gt: String

  """All values greater than or equal the given value."""
  team_gte: String

  """All values containing the given string."""
  team_contains: String

  """All values not containing the given string."""
  team_not_contains: String

  """All values starting with the given string."""
  team_starts_with: String

  """All values not starting with the given string."""
  team_not_starts_with: String

  """All values ending with the given string."""
  team_ends_with: String

  """All values not ending with the given string."""
  team_not_ends_with: String
  position: String

  """All values that are not equal to given value."""
  position_not: String

  """All values that are contained in given list."""
  position_in: [String!]

  """All values that are not contained in given list."""
  position_not_in: [String!]

  """All values less than the given value."""
  position_lt: String

  """All values less than or equal the given value."""
  position_lte: String

  """All values greater than the given value."""
  position_gt: String

  """All values greater than or equal the given value."""
  position_gte: String

  """All values containing the given string."""
  position_contains: String

  """All values not containing the given string."""
  position_not_contains: String

  """All values starting with the given string."""
  position_starts_with: String

  """All values not starting with the given string."""
  position_not_starts_with: String

  """All values ending with the given string."""
  position_ends_with: String

  """All values not ending with the given string."""
  position_not_ends_with: String
  closingtime: Int

  """All values that are not equal to given value."""
  closingtime_not: Int

  """All values that are contained in given list."""
  closingtime_in: [Int!]

  """All values that are not contained in given list."""
  closingtime_not_in: [Int!]

  """All values less than the given value."""
  closingtime_lt: Int

  """All values less than or equal the given value."""
  closingtime_lte: Int

  """All values greater than the given value."""
  closingtime_gt: Int

  """All values greater than or equal the given value."""
  closingtime_gte: Int
  maxbidder_every: UserWhereInput
  maxbidder_some: UserWhereInput
  maxbidder_none: UserWhereInput
  watchlist_every: WatchlistWhereInput
  watchlist_some: WatchlistWhereInput
  watchlist_none: WatchlistWhereInput
}

input PlayerWhereUniqueInput {
  id: ID
}

type Query {
  players(where: PlayerWhereInput, orderBy: PlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Player]!
  watchlists(where: WatchlistWhereInput, orderBy: WatchlistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Watchlist]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  player(where: PlayerWhereUniqueInput!): Player
  watchlist(where: WatchlistWhereUniqueInput!): Watchlist
  user(where: UserWhereUniqueInput!): User
  playersConnection(where: PlayerWhereInput, orderBy: PlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlayerConnection!
  watchlistsConnection(where: WatchlistWhereInput, orderBy: WatchlistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WatchlistConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  player(where: PlayerSubscriptionWhereInput): PlayerSubscriptionPayload
  watchlist(where: WatchlistSubscriptionWhereInput): WatchlistSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User implements Node {
  id: ID!
  team: String!
  email: String!
  password: String!
  watchlist(where: WatchlistWhereInput, orderBy: WatchlistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Watchlist!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  team: String!
  email: String!
  password: String!
  watchlist: WatchlistCreateManyWithoutUserInput
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutWatchlistInput {
  create: UserCreateWithoutWatchlistInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutWatchlistInput {
  team: String!
  email: String!
  password: String!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  team_ASC
  team_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  team: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  team: String
  email: String
  password: String
  watchlist: WatchlistUpdateManyWithoutUserInput
}

input UserUpdateInput {
  team: String
  email: String
  password: String
  watchlist: WatchlistUpdateManyWithoutUserInput
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
}

input UserUpdateOneWithoutWatchlistInput {
  create: UserCreateWithoutWatchlistInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutWatchlistDataInput
  upsert: UserUpsertWithoutWatchlistInput
}

input UserUpdateWithoutWatchlistDataInput {
  team: String
  email: String
  password: String
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpsertWithoutWatchlistInput {
  update: UserUpdateWithoutWatchlistDataInput!
  create: UserCreateWithoutWatchlistInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  team: String

  """All values that are not equal to given value."""
  team_not: String

  """All values that are contained in given list."""
  team_in: [String!]

  """All values that are not contained in given list."""
  team_not_in: [String!]

  """All values less than the given value."""
  team_lt: String

  """All values less than or equal the given value."""
  team_lte: String

  """All values greater than the given value."""
  team_gt: String

  """All values greater than or equal the given value."""
  team_gte: String

  """All values containing the given string."""
  team_contains: String

  """All values not containing the given string."""
  team_not_contains: String

  """All values starting with the given string."""
  team_starts_with: String

  """All values not starting with the given string."""
  team_not_starts_with: String

  """All values ending with the given string."""
  team_ends_with: String

  """All values not ending with the given string."""
  team_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  watchlist_every: WatchlistWhereInput
  watchlist_some: WatchlistWhereInput
  watchlist_none: WatchlistWhereInput
  _MagicalBackRelation_PlayerToUser_every: PlayerWhereInput
  _MagicalBackRelation_PlayerToUser_some: PlayerWhereInput
  _MagicalBackRelation_PlayerToUser_none: PlayerWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Watchlist implements Node {
  id: ID!
  player(where: PlayerWhereInput): Player!
  user(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type WatchlistConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WatchlistEdge]!
  aggregate: AggregateWatchlist!
}

input WatchlistCreateInput {
  player: PlayerCreateOneWithoutWatchlistInput!
  user: UserCreateOneWithoutWatchlistInput!
}

input WatchlistCreateManyWithoutPlayerInput {
  create: [WatchlistCreateWithoutPlayerInput!]
  connect: [WatchlistWhereUniqueInput!]
}

input WatchlistCreateManyWithoutUserInput {
  create: [WatchlistCreateWithoutUserInput!]
  connect: [WatchlistWhereUniqueInput!]
}

input WatchlistCreateWithoutPlayerInput {
  user: UserCreateOneWithoutWatchlistInput!
}

input WatchlistCreateWithoutUserInput {
  player: PlayerCreateOneWithoutWatchlistInput!
}

"""An edge in a connection."""
type WatchlistEdge {
  """The item at the end of the edge."""
  node: Watchlist!

  """A cursor for use in pagination."""
  cursor: String!
}

enum WatchlistOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WatchlistPreviousValues {
  id: ID!
}

type WatchlistSubscriptionPayload {
  mutation: MutationType!
  node: Watchlist
  updatedFields: [String!]
  previousValues: WatchlistPreviousValues
}

input WatchlistSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [WatchlistSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [WatchlistSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WatchlistSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WatchlistWhereInput
}

input WatchlistUpdateInput {
  player: PlayerUpdateOneWithoutWatchlistInput
  user: UserUpdateOneWithoutWatchlistInput
}

input WatchlistUpdateManyWithoutPlayerInput {
  create: [WatchlistCreateWithoutPlayerInput!]
  connect: [WatchlistWhereUniqueInput!]
  disconnect: [WatchlistWhereUniqueInput!]
  delete: [WatchlistWhereUniqueInput!]
  update: [WatchlistUpdateWithWhereUniqueWithoutPlayerInput!]
  upsert: [WatchlistUpsertWithWhereUniqueWithoutPlayerInput!]
}

input WatchlistUpdateManyWithoutUserInput {
  create: [WatchlistCreateWithoutUserInput!]
  connect: [WatchlistWhereUniqueInput!]
  disconnect: [WatchlistWhereUniqueInput!]
  delete: [WatchlistWhereUniqueInput!]
  update: [WatchlistUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [WatchlistUpsertWithWhereUniqueWithoutUserInput!]
}

input WatchlistUpdateWithoutPlayerDataInput {
  user: UserUpdateOneWithoutWatchlistInput
}

input WatchlistUpdateWithoutUserDataInput {
  player: PlayerUpdateOneWithoutWatchlistInput
}

input WatchlistUpdateWithWhereUniqueWithoutPlayerInput {
  where: WatchlistWhereUniqueInput!
  data: WatchlistUpdateWithoutPlayerDataInput!
}

input WatchlistUpdateWithWhereUniqueWithoutUserInput {
  where: WatchlistWhereUniqueInput!
  data: WatchlistUpdateWithoutUserDataInput!
}

input WatchlistUpsertWithWhereUniqueWithoutPlayerInput {
  where: WatchlistWhereUniqueInput!
  update: WatchlistUpdateWithoutPlayerDataInput!
  create: WatchlistCreateWithoutPlayerInput!
}

input WatchlistUpsertWithWhereUniqueWithoutUserInput {
  where: WatchlistWhereUniqueInput!
  update: WatchlistUpdateWithoutUserDataInput!
  create: WatchlistCreateWithoutUserInput!
}

input WatchlistWhereInput {
  """Logical AND on all given filters."""
  AND: [WatchlistWhereInput!]

  """Logical OR on all given filters."""
  OR: [WatchlistWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WatchlistWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  player: PlayerWhereInput
  user: UserWhereInput
}

input WatchlistWhereUniqueInput {
  id: ID
}
